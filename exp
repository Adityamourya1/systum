2.#include <limits.h> 
#include <stdio.h> 
#include <stdlib.h> 
#define MAX 20 
char stk[20]; 
int top = -1; 
int isEmpty() 
{ return top == -1; } 
int isFull() 
{ return top == MAX - 1; } 
char peek() 
{ return stk[top]; } 
char pop() 
{ if(isEmpty()) 
 return -1; 
 char ch = stk[top]; 
 top--; 
 return(ch); 
} 
void push(char oper) 
{ 
 if(isFull()) 
 printf("Stack Full!!!!"); 
 else{ 
 top++; 
 stk[top] = oper; 
 } 
} 
int checkIfOperand(char ch) 
{ 
 return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z'); 
} 
int precedence(char ch) 
{ 
 switch (ch) 
 { 
 case '+': 
 case '-': 
 return 1; 
 case '*': 
 case '/': 
 return 2; 
 case '^': 
 return 3; 
 } 
 return -1; 
} 
int covertInfixToPostfix(char* expression) 
{ 
 int i, j; 
 for (i = 0, j = -1; expression[i]; ++i) 
 { 
 if (checkIfOperand(expression[i])) 
 expression[++j] = expression[i]; 
 else if (expression[i] == '(') 
 push(expression[i]); 
 else if (expression[i] == ')') 
 { 
 while (!isEmpty() && peek() != '(') 
 expression[++j] = pop(); 
 if (!isEmpty() && peek() != '(') 
 return -1; 
 else 
 pop(); 
 } 
 else 
 { 
 while (!isEmpty() && precedence(expression[i]) <= precedence(peek())) 
 expression[++j] = pop(); 
 push(expression[i]); 
 } 
 } 
 while (!isEmpty()) 
 expression[++j] = pop(); 
 expression[++j] = '\0'; 
 printf( "%s", expression); 
} 
int main() 
{ 
char expression[] = "((x+(y*z))-w)"; 
 covertInfixToPostfix(expression); 
 return 0; 
} 
OUTPUT: 

3.
#include <stdio.h> 
#include <stdlib.h> 
#define MAX_SIZE 100 
// Stack implementation 
int stack[MAX_SIZE]; 
int top = -1; 
void push(int item) { 
 if (top >= MAX_SIZE - 1) { 
printf("Stack Overflow\n"); 
 return; 
 } 
 top++; 
 stack[top] = item; 
} 
int pop() { 
 if (top < 0) { 
printf("Stack Underflow\n"); 
 return -1; 
 } 
 int item = stack[top]; 
 top--; 
 return item; 
} 
int is_operator(char symbol) { 
 if (symbol == '+' || symbol == '-' || symbol == '*' || symbol == '/') { 
 return 1; 
 } 
 return 0; 
} 
int evaluate(char* expression) { 
 int i = 0; 
 char symbol = expression[i]; 
 int operand1, operand2, result; 
 while (symbol != '\0') { 
 if (symbol >= '0' && symbol <= '9') { 
 int num = symbol - '0'; 
 push(num); 
 } 
 else if (is_operator(symbol)) { 
 operand2 = pop(); 
 operand1 = pop(); 
 switch(symbol) { 
 case '+': result = operand1 + operand2; break; 
 case '-': result = operand1 - operand2; break; 
 case '*': result = operand1 * operand2; break; 
 case '/': result = operand1 / operand2; break; 
 } 
 push(result); 
 } 
i++; 
 symbol = expression[i]; 
 } 
 result = pop(); 
 return result; 
} 
int main() { 
 char expression[] = "5 6 7 + * 8 -"; 
 int result = evaluate(expression); 
printf("Result= %d\n", result); 
return 0; 
} 
OUTPUT: 

4.
#include<stdio.h> 
#include<stdlib.h> 
#define maxsize 5 
void insert(); 
void delete(); 
void display(); 
int front = -1, rear = -1; 
int queue[maxsize]; 
void main () 
{ 
 int choice; 
 while(choice != 4) 
 { 
 printf("\n*************************Main Menu*****************************\n"); 
 printf("\n=================================================================\n"); 
 printf("\n1.insert an element\n2.Delete an element\n3.Display the queue\n4.Exit\n"); 
 printf("\nEnter your choice ?"); 
 scanf("%d",&choice); 
 switch(choice) 
 { 
 case 1: 
 insert(); 
 break; 
 case 2: 
 delete(); 
 break; 
 case 3: 
 display(); 
 break; 
 case 4: 
 exit(0); 
 break; 
 default: 
 printf("\nEnter valid choice??\n"); 
 } 
 } 
} 
void insert() 
{ 
 int item; 
 printf("\nEnter the element\n"); 
 scanf("\n%d",&item); 
 if(rear == maxsize-1) 
 { 
 printf("\nOVERFLOW\n"); 
 return; 
 } 
 if(front == -1 && rear == -1) 
 { 
 front = 0; 
 rear = 0; 
 } 
 else 
 { 
 rear = rear+1; 
 } 
 queue[rear] = item; 
 printf("\nValue inserted "); 
 
} 
void delete() 
{ 
 int item; 
 if (front == -1 || front > rear) 
 { 
 printf("\nUNDERFLOW\n"); 
 return; 
 
 } 
 else 
 { 
 item = queue[front]; 
 if(front == rear) 
 { 
 front = -1; 
 rear = -1 ; 
 } 
 else 
 { 
 front = front + 1; 
 } 
 printf("\nvalue deleted "); 
 } 
 
 
} 
 
void display() 
{ 
 int i; 
 if(rear == -1) 
 { 
 printf("\nEmpty queue\n"); 
 } 
 else 
 { printf("\nprinting values .....\n"); 
 for(i=front;i<=rear;i++) 
 { 
 printf("\n%d\n",queue[i]); 
 } 
 } 
} 
OUTPUT: 

5.
#include <stdio.h> 
# define max 6 
int queue[max]; // array declaration 
int front=-1; 
int rear=-1; 
// function to insert an element in a circular queue 
void enqueue(int element) 
{ 
 if(front==-1 && rear==-1) // condition to check queue is empty 
 { 
 front=0; 
 rear=0; 
 queue[rear]=element; 
 } 
 else if((rear+1)%max==front) // condition to check queue is full 
 { 
 printf("Queue is overflow.."); 
 } 
 else 
 { 
 rear=(rear+1)%max; // rear is incremented 
 queue[rear]=element; // assigning a value to the queue at the rear position. 
 } 
} 
// function to delete the element from the queue 
int dequeue() 
{ 
 if((front==-1) && (rear==-1)) // condition to check queue is empty 
 { 
 printf("\nQueue is underflow.."); 
 } 
 else if(front==rear) 
{ 
 printf("\nThe dequeued element is %d", queue[front]); 
 front=-1; 
 rear=-1; 
} 
else 
{ 
 printf("\nThe dequeued element is %d", queue[front]); 
 front=(front+1)%max; 
} 
} 
// function to display the elements of a queue 
void display() 
{ 
 int i=front; 
 if(front==-1 && rear==-1) 
 { 
 printf("\n Queue is empty.."); 
 } 
 else 
 { 
 printf("\nElements in a Queue are :"); 
 while(i<=rear) 
 { 
 printf("%d,", queue[i]); 
 i=(i+1)%max; 
 } 
 } 
} 
int main() 
{ 
 int choice=1,x; // variables declaration 
 while(choice<4 && choice!=0) // while loop 
 { 
 printf("\n Press 1: Insert an element"); 
 printf("\nPress 2: Delete an element"); 
 printf("\nPress 3: Display the element"); 
 printf("\nEnter your choice"); 
 scanf("%d", &choice); 
 switch(choice) 
 { 
 case 1: printf("Enter the element which is to be inserted"); 
 scanf("%d", &x); 
 enqueue(x); 
 break; 
 case 2: dequeue(); 
 break; 
 case 3: display(); 
 }} 
 return 0; 
} 
OUTPUT: 
 
6.
#include<stdio.h> 
#include<stdlib.h> 
struct node 
{ 
 int data; 
 struct node *next; 
}; 
struct node *head; 
 
void beginsert (); 
void lastinsert (); 
void randominsert(); 
void begin_delete(); 
void last_delete(); 
void random_delete(); 
void display(); 
void search(); 
void main () 
{ 
 int choice =0; 
 while(choice != 9) 
 { 
 printf("\n\n*********Main Menu*********\n"); 
 printf("\nChoose one option from the following list ...\n"); 
 printf("\n===============================================\n"); 
 printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Delete 
from Beginning\n 5.Delete from last\n6.Delete node after specified location\n7.Search for an 
element\n8.Show\n9.Exit\n"); 
 printf("\nEnter your choice?\n"); 
 scanf("\n%d",&choice); 
 switch(choice) 
 { 
 case 1: 
 beginsert(); 
 break; 
 case 2: 
 lastinsert(); 
 break; 
 case 3: 
 randominsert(); 
 break; 
 case 4: 
 begin_delete(); 
 break; 
 case 5: 
 last_delete(); 
 break; 
 case 6: 
 random_delete(); 
 break; 
 case 7: 
 search(); 
 break; 
 case 8: 
 display(); 
 break; 
 case 9: 
 exit(0); 
 break; 
 default: 
 printf("Please enter valid choice.."); 
 } 
 } 
} 
void beginsert() 
{ 
 struct node *ptr; 
 int item; 
 ptr = (struct node *) malloc(sizeof(struct node *)); 
 if(ptr == NULL) 
 { 
 printf("\nOVERFLOW"); 
 } 
 else 
 { 
 printf("\nEnter value\n"); 
 scanf("%d",&item); 
 ptr->data = item; 
 ptr->next = head; 
 head = ptr; 
 printf("\nNode inserted"); 
 } 
 
} 
void lastinsert() 
{ 
 struct node *ptr,*temp; 
 int item; 
 ptr = (struct node*)malloc(sizeof(struct node)); 
 if(ptr == NULL) 
 { 
 printf("\nOVERFLOW"); 
 } 
 else 
 { 
 printf("\nEnter value?\n"); 
 scanf("%d",&item); 
 ptr->data = item; 
 if(head == NULL) 
 { 
 ptr -> next = NULL; 
 head = ptr; 
 printf("\nNode inserted"); 
 } 
 else 
 { 
 temp = head; 
 while (temp -> next != NULL) 
 { 
 temp = temp -> next; 
 } 
 temp->next = ptr; 
 ptr->next = NULL; 
 printf("\nNode inserted"); 
 
 } 
 } 
} 
void randominsert() 
{ 
 int i,loc,item; 
 struct node *ptr, *temp; 
 ptr = (struct node *) malloc (sizeof(struct node)); 
 if(ptr == NULL) 
 { 
 printf("\nOVERFLOW"); 
 } 
 else 
 { 
 printf("\nEnter element value"); 
 scanf("%d",&item); 
 ptr->data = item; 
 printf("\nEnter the location after which you want to insert "); 
 scanf("\n%d",&loc); 
 temp=head; 
 for(i=0;i<loc;i++) 
 { 
 temp = temp->next; 
 if(temp == NULL) 
 { 
 printf("\ncan't insert\n"); 
 return; 
 } 
 
 } 
 ptr ->next = temp ->next; 
 temp ->next = ptr; 
 printf("\nNode inserted"); 
 } 
} 
void begin_delete() 
{ 
 struct node *ptr; 
 if(head == NULL) 
 { 
 printf("\nList is empty\n"); 
 } 
 else 
 { 
 ptr = head; 
 head = ptr->next; 
 free(ptr); 
 printf("\nNode deleted from the begining ...\n"); 
 } 
} 
void last_delete() 
{ 
 struct node *ptr,*ptr1; 
 if(head == NULL) 
 { 
 printf("\nlist is empty"); 
 } 
 else if(head -> next == NULL) 
 { 
 head = NULL; 
 free(head); 
 printf("\nOnly node of the list deleted ...\n"); 
 } 
 
 else 
 { 
 ptr = head; 
 while(ptr->next != NULL) 
 { 
 ptr1 = ptr; 
 ptr = ptr ->next; 
 } 
 ptr1->next = NULL; 
 free(ptr); 
 printf("\nDeleted Node from the last ...\n"); 
 } 
} 
void random_delete() 
{ 
 struct node *ptr,*ptr1; 
 int loc,i; 
 printf("\n Enter the location of the node after which you want to perform deletion \n"); 
 scanf("%d",&loc); 
 ptr=head; 
 for(i=0;i<loc;i++) 
 { 
 ptr1 = ptr; 
 ptr = ptr->next; 
 
 if(ptr == NULL) 
 { 
 printf("\nCan't delete"); 
 return; 
 } 
 } 
 ptr1 ->next = ptr ->next; 
 free(ptr); 
 printf("\nDeleted node %d ",loc+1); 
} 
void search() 
{ 
 struct node *ptr; 
 int item,i=0,flag; 
 ptr = head; 
 if(ptr == NULL) 
 { 
 printf("\nEmpty List\n"); 
 } 
 else 
 { 
 printf("\nEnter item which you want to search?\n"); 
 scanf("%d",&item); 
 while (ptr!=NULL) 
 { 
 if(ptr->data == item) 
 { 
 printf("item found at location %d ",i+1); 
 flag=0; 
 } 
 else 
 { 
 flag=1; 
 } 
 i++; 
 ptr = ptr -> next; 
 } 
 if(flag==1) 
 { 
 printf("Item not found\n"); 
 } 
 } 
} void display() 
{ 
 struct node *ptr; 
 ptr = head; 
 if(ptr == NULL) 
 { 
 printf("Nothing to print"); 
 } 
 else 
 { 
 printf("\nprinting values . . . . .\n"); 
 while (ptr!=NULL) 
 { 
 printf("\n%d",ptr->data); 
 ptr = ptr -> next; 
 } 
 } 
} 
OUTPUT: 

7.#include <stdio.h>
#include <stdio.h>
int heap[40];
intsize=-1;
// retrieving the parent node of the child node
int parent(int i)
{
return (i - 1) / 2;
}
// retrieving the left child of the parent node.
int left_child(int i)
{
return i+1;
}
// retrieving the right child of the parent
int right_child(int i)
{
return i+2;
}
// Returning the element having the highest priority
int get_Max()
{
return heap[0];
}
//Returning the element having the minimum priority
int get_Min()
{
return heap[size];
}
// function to move the node up the tree in order to restore the heap property.
void moveUp(int i)
{
while (i > 0)
{
// swapping parent node with a child node
if(heap[parent(i)] < heap[i]) {
int temp;
temp=heap[parent(i)];
heap[parent(i)]=heap[i];
heap[i]=temp;
}
// updating the value of i to i/2
i=i/2;
}
}
//function to move the node down the tree in order to restore the heap property.
void moveDown(int k)
{
int index = k;
// getting the location of the Left Child
int left = left_child(k);
if (left <= size && heap[left] > heap[index]) {
index = left;
}
// getting the location of the Right Child
int right = right_child(k);
if (right <= size && heap[right] > heap[index]) {
index = right;
}
// If k is not equal to index
if (k != index) {
int temp;
temp=heap[index];
heap[index]=heap[k];
heap[k]=temp;
moveDown(index);
}
}
// Removing the element of maximum priority
void removeMax()
{
int r= heap[0];
heap[0]=heap[size];
size=size-1;
moveDown(0);
}
//inserting the element in a priority queue
void insert(int p)
{
size = size + 1;
heap[size] = p;
// move Up to maintain heap property
moveUp(size);
}
//Removing the element from the priority queue at a given index i.
void delete(int i)
{
heap[i] = heap[0] + 1;
// move the node stored at ith location is shifted to the root node
moveUp(i);
// Removing the node having maximum priority
removeMax();
}
int main()
{
// Inserting the elements in a priority queue
insert(20);
insert(19);
insert(21);
insert(18);
insert(12);
insert(17);
insert(15);
insert(16);
insert(14);
int i=0;
printf("Elements in a priority queue are : ");
for(int i=0;i<=size;i++)
{
printf("%d ",heap[i]);
}
delete(2); // deleting the element whose index is 2.
printf("\nElements in a priority queue after deleting the element are : ");
for(int i=0;i<=size;i++)
{
printf("%d ",heap[i]);
}
int max=get_Max();
printf("\nThe element which is having the highest priority is %d: ",max);
int min=get_Min();
printf("\nThe element which is having the minimum priority is : %d",min);
return 0;
}
OUTPUT:

8.#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
struct node *head;
void beginsert ();
void lastinsert ();
void randominsert();
void begin_delete();
void last_delete();
void random_delete();
void display();
void search();
void main ()
{
int choice =0;
while(choice != 9)
{
printf("\n\n*********Main Menu*********\n");
printf("\nChoose one option from the following list ...\n");
printf("\n===============================================\n");
printf("\n1.Insert in begining\n2.Insert atlast\n3.Insert at any random location\n4.Delete from
Beginning\n 5.Delete from last\n6.Delete node after specified location\n7.Search for an element\
n8.Show\n9.Exit\n");
printf("\nEnter your choice?\n");
scanf("\n%d",&choice);
switch(choice)
{
case 1:
beginsert();
break;
case 2:
lastinsert();
break;
case 3:randominsert();break;
case 4:
begin_delete();
break;
case 5:
last_delete();
break;
case 6:
random_delete();
break;
case 7:
search();
break;
case 8:
display();
break;
case 9:
exit(0);
break;
default:
printf("Please enter valid choice..");
}
}
}
void beginsert()
{
struct node *ptr;
int item;
ptr = (struct node *) malloc(sizeof(struct node *));
if(ptr == NULL)
{
printf("\nOVERFLOW");
}
else
{
printf("\nEnter value\n");
scanf("%d",&item);
ptr->data = item;
ptr->next = head;
head = ptr;
printf("\nNode inserted");
}
}
void lastinsert()
{
struct node *ptr,*temp;int item;
ptr = (struct node*)malloc(sizeof(struct node));
if(ptr == NULL)
{
printf("\nOVERFLOW");
}
else
{
printf("\nEnter value?\n");
scanf("%d",&item);
ptr->data = item;
if(head == NULL)
{
ptr -> next = NULL;
head = ptr;
printf("\nNode inserted");
}
else
{
temp = head;
while (temp -> next != NULL)
{
temp = temp -> next;
}
temp->next = ptr;
ptr->next = NULL;
printf("\nNode inserted");
}
}
}
void randominsert()
{
int i,loc,item;
struct node *ptr, *temp;
ptr = (struct node *) malloc (sizeof(struct node));
if(ptr == NULL)
{
printf("\nOVERFLOW");
}
else
{
printf("\nEnter element value");
scanf("%d",&item);
ptr->data = item;
printf("\nEnter the location after which you want to insert ");
scanf("\n%d",&loc);
temp=head;for(i=0;i<loc;i++)
{
temp = temp->next;
if(temp == NULL)
{
printf("\ncan't insert\n");
return;
}
}
ptr ->next = temp ->next;
temp ->next = ptr;
printf("\nNode inserted");
}
}
void begin_delete()
{
struct node *ptr;
if(head == NULL)
{
printf("\nList is empty\n");
}
else
{
ptr = head;
head = ptr->next;
free(ptr);
printf("\nNode deleted from the begining ...\n");
}
}
void last_delete()
{
struct node *ptr,*ptr1;
if(head == NULL)
{
printf("\nlist is empty");
}
else if(head -> next == NULL)
{
head = NULL;
free(head);
printf("\nOnly node of the list deleted ...\n");
}
else
{
ptr = head;
while(ptr->next != NULL)
{
ptr1 = ptr;
ptr = ptr ->next;
}
ptr1->next = NULL;
free(ptr);
printf("\nDeleted Node from the last ...\n");
}
}
void random_delete()
{
struct node *ptr,*ptr1;
int loc,i;
printf("\n Enter the location of the node after which you want to perform deletion \n");
scanf("%d",&loc);
ptr=head;
for(i=0;i<loc;i++)
{
ptr1 = ptr;
ptr = ptr->next;
if(ptr == NULL)
{
printf("\nCan't delete");
return;
}
}
ptr1 ->next = ptr ->next;
free(ptr);
printf("\nDeleted node %d ",loc+1);
}
void search()
{
struct node *ptr;
int item,i=0,flag;
ptr = head;
if(ptr == NULL)
{
printf("\nEmpty List\n");
}
else
{
printf("\nEnter item which you want to search?\n");
scanf("%d",&item);
while (ptr!=NULL)
{
if(ptr->data == item)
{
 printf("item found at location %d ",i+1);flag=0;
}
else
{
flag=1;
}
i++;
ptr = ptr -> next;
}
if(flag==1)
{
printf("Item not found\n");
}
}
}
void display()
{
struct node *ptr;
ptr = head;
if(ptr == NULL)
{
printf("Nothing to print");
}
else
{
printf("\nprinting values........\n");
while (ptr!=NULL)
{
printf("\n%d",ptr->data);
ptr = ptr -> next;
}
}
}
OUTPUT:


9.
#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Node* addToEmpty(struct Node* last, int data) {
if (last != NULL) return last;
// allocate memory to the new node
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
// assign data to the new node
newNode->data = data;
// assign last to newNode
last = newNode;
// create link to iteself
last->next = last;
return last;
}
// add node to the front
struct Node* addFront(struct Node* last, int data) {
// check if the list is empty
if (last == NULL) return addToEmpty(last, data);
// allocate memory to the new node
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
// add data to the node
newNode->data = data;
// store the address of the current first node in the newNode
newNode->next = last->next;
// make newNode as head
last->next = newNode;
return last;
}
// add node to the end
struct Node* addEnd(struct Node* last, int data) {
// check if the node is empty
if (last == NULL) return addToEmpty(last, data);
// allocate memory to the new node
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
// add data to the node
newNode->data = data;
// store the address of the head node to next of newNode
newNode->next = last->next;
// point the current last node to the newNode
last->next = newNode;
// make newNode as the last node
last = newNode;
return last;
}
// insert node after a specific node
struct Node* addAfter(struct Node* last, int data, int item) {
// check if the list is empty
if (last == NULL) return NULL;
struct Node *newNode, *p;
p = last->next;
do {
// if the item is found, place newNode after it
if (p->data == item) {
// allocate memory to the new node
newNode = (struct Node*)malloc(sizeof(struct Node));
// add data to the node
newNode->data = data;
// make the next of the current node as the next of newNode
newNode->next = p->next;
// put newNode to the next of p
p->next = newNode;
// if p is the last node, make newNode as the last node
if (p == last) last = newNode;
return last;
}
p = p->next;
} while (p != last->next);
printf("\nThe given node is not present in the list");
return last;
}
// delete a node
void deleteNode(struct Node** last, int key) {
// if linked list is empty
if (*last == NULL) return;
// if the list contains only a single node
if ((*last)->data == key && (*last)->next == *last) {
free(*last);
*last = NULL;
return;
}
struct Node *temp = *last, *d;
// if last is to be deleted
if ((*last)->data == key) {
// find the node before the last node
while (temp->next != *last) temp = temp->next;
// point temp node to the next of last i.e. first node
temp->next = (*last)->next;
free(*last);
*last = temp->next;
}
// travel to the node to be deleted
while (temp->next != *last&& temp->next->data != key) {
temp = temp->next;
}
// if node to be deleted was found
if (temp->next->data == key) {
d = temp->next;
temp->next = d->next;
free(d);
}
}
void traverse(struct Node* last) {
struct Node* p;
if (last == NULL) {
printf("The list is empty");
return;
}
p = last->next;
do {
printf("%d ", p->data);
p = p->next;
} while (p != last->next);
}
int main() {
struct Node* last = NULL;
last = addToEmpty(last, 6);
last = addEnd(last, 8);
last = addFront(last, 2);
last = addAfter(last, 10, 2);
traverse(last);
deleteNode(&last, 8);
printf("\n");
traverse(last);
return 0;
}
OUTPUT:

10.
#include<stdio.h>
#include<stdlib.h>
struct node
{
struct node *prev;
struct node *next;int data;
};
struct node *head;
void insertion_beginning();
void insertion_last();
void insertion_specified();
void deletion_beginning();
void deletion_last();
void deletion_specified();
void display();
void search();
void main ()
{
int choice =0;
while(choice != 9)
{
printf("\n*********Main Menu*********\n");
printf("\nChoose one option from the following list ...\n");
printf("\n===============================================\n");
printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Delete from
Beginning\n 5.Delete from last\n6.Delete the node afterthe given data\n7.Search\n8.Show\n9.Exit\n");
printf("\nEnter your choice?\n");
scanf("\n%d",&choice);
switch(choice)
{
case 1:
insertion_beginning();
break;
case 2:
insertion_last();
break;
case 3:
insertion_specified();
break;
case 4:
deletion_beginning();
break;
case 5:
deletion_last();
break;
case 6:
deletion_specified();
break;
case 7:
search();
break;
case 8:
display()
;break;
case 9:
exit(0);
break;
default:
printf("Please enter valid choice..");
}
}
}
void insertion_beginning()
{
struct node *ptr;
int item;
ptr = (struct node *)malloc(sizeof(struct node));
if(ptr == NULL)
{
printf("\nOVERFLOW");
}
else
{
printf("\nEnterItem value");
scanf("%d",&item);
if(head==NULL)
{
ptr->next = NULL;
ptr->prev=NULL;
ptr->data=item;
head=ptr;
}
else
{
ptr->data=item;
ptr->prev=NULL;
ptr->next = head;
head->prev=ptr;
head=ptr;
}
printf("\nNode inserted\n");
}
}
void insertion_last()
{
struct node *ptr,*temp;
int item;
ptr = (struct node *) malloc(sizeof(struct node));
if(ptr == NULL)
{
printf("\nOVERFLOW");
}
else
{
printf("\nEnter value");
scanf("%d",&item);
ptr->data=item;
if(head == NULL)
{
ptr->next = NULL;
ptr->prev = NULL;
head = ptr;
}
else
{
temp = head;
while(temp->next!=NULL)
{
temp = temp->next;
}
temp->next = ptr;
ptr ->prev=temp;
ptr->next = NULL;
}
}
printf("\nnode inserted\n");
}
void insertion_specified()
{
struct node *ptr,*temp;
int item,loc,i;
ptr = (struct node *)malloc(sizeof(struct node));
if(ptr == NULL)
{
printf("\n OVERFLOW");
}
else
{
temp=head;
printf("Enter the location");
scanf("%d",&loc);
for(i=0;i<loc;i++)
{
temp = temp->next;
if(temp == NULL)
{
printf("\n There are less than %d elements", loc);
return;
}
}
printf("Enter value");
scanf("%d",&item);
ptr->data = item;
ptr->next = temp->next;
ptr -> prev = temp;
temp->next = ptr;
temp->next->prev=ptr;
printf("\nnode inserted\n");
}
}
void deletion_beginning()
{
struct node *ptr;
if(head == NULL)
{
printf("\n UNDERFLOW");
}
else if(head->next == NULL)
{
head = NULL;
free(head);
printf("\nnode deleted\n");
}
else
{
ptr = head;
head = head -> next;
head -> prev = NULL;
free(ptr);
printf("\nnode deleted\n");
}
}
void deletion_last()
{
struct node *ptr;
if(head == NULL)
{
printf("\n UNDERFLOW");
}
else if(head->next == NULL)
{
head = NULL;
free(head);
printf("\nnode deleted\n");
}
else
{
ptr = head;
if(ptr->next != NULL)
{
ptr = ptr -> next;
}
ptr -> prev -> next = NULL;
free(ptr);
printf("\nnode deleted\n");
}
}
void deletion_specified()
{
struct node *ptr, *temp;
int val;
printf("\n Enter the data after which the node is to be deleted : ");
scanf("%d", &val);
ptr = head;
while(ptr -> data != val)
ptr = ptr -> next;
if(ptr -> next == NULL)
{
printf("\nCan't delete\n");
}
else if(ptr -> next -> next == NULL)
{
ptr ->next = NULL;
}
else
{
temp = ptr -> next;
ptr -> next = temp -> next;
temp -> next -> prev = ptr;
free(temp);
printf("\nnode deleted\n");
}
}
void display()
{
struct node *ptr;
printf("\n printing values...\n");
ptr = head;
while(ptr != NULL)
{
printf("%d\n",ptr->data);
ptr=ptr->next;
}
}
void search()
{
struct node *ptr;
int item,i=0,flag;
ptr = head;
if(ptr == NULL)
{
printf("\nEmpty List\n");
}
else
{
printf("\nEnter item which you want to search?\n");
scanf("%d",&item);
while (ptr!=NULL)
{
if(ptr->data == item)
{
printf("\nitem found at location %d ",i+1);
flag=0;
break;
}
else
{
flag=1;
}
i++;
ptr = ptr -> next;
}
if(flag==1)
{
printf("\nItem not found\n");
}
}
}
OUTPUT:


11.
#include<stdio.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
struct node *front;
struct node *rear;
void insert();
void delete();
void display();
void main ()
{
int choice;
while(choice != 4)
{
printf("\n*************************Main Menu*****************************\n");
printf("\n=================================================================\n");
printf("\n1.insert an element\n2.Delete an element\n3.Display the queue\n4.Exit\n");
printf("\nEnter your choice ?");
scanf("%d",& choice);
switch(choice)
{
case 1:
insert();
break;
case 2:
delete();
break;
case 3:
display();
break;
case 4:
exit(0);
break;
default:
printf("\nEnter valid choice??\n");
}
}
}
void insert()
{
struct node *ptr;
int item;
ptr = (struct node *) malloc (sizeof(struct node));
if(ptr == NULL)
{
printf("\nOVERFLOW\n");
return;
}
else
{
printf("\nEnter value?\n");
scanf("%d",&item);
ptr -> data = item;
if(front == NULL)
{
front = ptr;
rear = ptr;
front -> next = NULL;
rear -> next = NULL;
}
else
{
rear -> next = ptr;
rear = ptr;
rear->next = NULL;
}
}
}
void delete ()
{
struct node *ptr;
if(front == NULL)
{
printf("\nUNDERFLOW\n");
return;
}else
{
ptr = front;
front = front -> next;
free(ptr);
}
}
void display()
{
struct node *ptr;
ptr = front;
if(front == NULL)
{
printf("\nEmpty queue\n");
}
else
{ printf("\nprinting values.....\n");
while(ptr != NULL)
{
printf("\n%d\n",ptr -> data);
ptr = ptr -> next;
}
}
}
OUTPUT:

12.
#include <stdio.h>
#include <stdlib.h> #include <stdbool.h>
//Represent a node of binary tree
struct node{
int data;
struct node *left;
struct node *right;
};
//Represent the root of binary tree
struct node *root = NULL;
//createNode() will create a new node
struct node* createNode(int data){
//Create a new node
struct node *newNode = (struct node*)malloc(sizeof(struct node));
//Assign data to newNode,set left and right child to NULL
newNode->data = data;
newNode->left = NULL;
newNode->right = NULL;
return newNode;
}
//Represent a queue
struct queue
{
int front,rear,size;
struct node* *arr;
};
//createQueue() will create a queue
struct queue* createQueue()
{
struct queue* newQueue = (struct queue*) malloc(sizeof( struct queue ));
newQueue->front = -1;
newQueue->rear = 0;
newQueue->size = 0;
newQueue->arr = (struct node**) malloc(100 * sizeof( struct node* ));
return newQueue;
}
//Adds a node to queue
void enqueue(struct queue* queue, struct node *temp){
queue->arr[queue->rear++] = temp;queue->size++;
}
//Deletes a node from queue
struct node *dequeue(struct queue* queue){
queue->size--;
return queue->arr[++queue->front];
}
//insertNode() will add new node to the binary tree
void insertNode(int data) {
//Create a new node
struct node *newNode = createNode(data);
//Check whether tree is empty
if(root == NULL){
root = newNode;
return;
}
else {
//Queue will be used to keep track of nodes of tree level-wise
struct queue* queue = createQueue();
//Add root to the queue
enqueue(queue, root);
while(true) {
struct node *node = dequeue(queue);
//If node has both left and right child, add both the child to queue
if(node->left != NULL && node->right != NULL) {
enqueue(queue, node->left);
enqueue(queue, node->right);
}
else {
//If node has no left child, make newNode as left child
if(node->left == NULL) {
node->left = newNode;
enqueue(queue, node->left);
}
//If node has left child but no right child, make newNode as right child
else {
node->right = newNode;
enqueue(queue, node->right);
}
break;
}
}
}
}
//inorder() will perform inorder traversal on binary search tree
void inorderTraversal(struct node *node) {
//Check whether tree is empty
if(root == NULL){
printf("Tree is empty\n");
return;
}
else {
if(node->left != NULL)
inorderTraversal(node->left);
printf("%d ", node->data);
if(node->right != NULL)
inorderTraversal(node->right);
}
}
int main(){
//Add nodes to the binary tree
insertNode(1);
//1 will become root node of the tree
printf("Binary tree afterinsertion:\n");
//Binary after inserting nodes
inorderTraversal(root);
insertNode(2);
insertNode(3);
//2 will become left child and 3 will become right child of root node 1
printf("\nBinary tree after insertion: \n");
//Binary after inserting nodes
inorderTraversal(root);
insertNode(4);
insertNode(5);
//4 will become left child and 5 will become right child of node 2
printf("\nBinary tree after insertion: \n");
//Binary after inserting nodes
inorderTraversal(root);
insertNode(6);
insertNode(7);
//6 will become left child and 7 will become right child of node 3
printf("\nBinary tree after insertion: \n");
//Binary after inserting nodes
inorderTraversal(root);
return 0;
}
OUTPUT:

13.DFS 
// DFS algorithm in C 
#include <stdio.h> 
#include <stdlib.h> 
struct node { 
 int vertex; 
 struct node* next; 
};
struct node* createNode(int v); 
struct Graph { 
 int numVertices; 
 int* visited; 
 // We need int** to store a two dimensional array. 
 // Similary, we need struct node** to store an array of Linked lists 
 struct node** adjLists; 
};
// DFS algo 
void DFS(struct Graph* graph, int vertex) { 
 struct node* adjList = graph->adjLists[vertex]; 
 struct node* temp = adjList; 
 graph->visited[vertex] = 1; 
 printf("Visited %d \n", vertex); 
 while (temp != NULL) { 
 int connectedVertex = temp->vertex; 
 if (graph->visited[connectedVertex] == 0) { 
 DFS(graph, connectedVertex); 
 } 
 temp = temp->next; 
 } 
} 
// Create a node 
struct node* createNode(int v) { 
 struct node* newNode = malloc(sizeof(struct node)); 
 newNode->vertex = v; 
 newNode->next = NULL; 
 return newNode; 
} 
// Create graph 
struct Graph* createGraph(int vertices) { 
 struct Graph* graph = malloc(sizeof(struct Graph)); 
 graph->numVertices = vertices; 
 graph->adjLists = malloc(vertices * sizeof(struct node*)); 
 graph->visited = malloc(vertices * sizeof(int)); 
 int i; 
 for (i = 0; i < vertices; i++) { 
 graph->adjLists[i] = NULL; 
 graph->visited[i] = 0; 
 } 
 return graph; 
} 
// Add edge 
void addEdge(struct Graph* graph, int src, int dest) { 
 // Add edge from src to dest 
 struct node* newNode = createNode(dest); 
 newNode->next = graph->adjLists[src]; 
 graph->adjLists[src] = newNode; 
 // Add edge from dest to src 
 newNode = createNode(src); 
 newNode->next = graph->adjLists[dest]; 
 graph->adjLists[dest] = newNode; 
} 
// Print the graph 
void printGraph(struct Graph* graph) { 
 int v; 
 for (v = 0; v < graph->numVertices; v++) { 
 struct node* temp = graph->adjLists[v]; 
 printf("\n Adjacency list of vertex %d\n ", v); 
 while (temp) { 
 printf("%d -> ", temp->vertex); 
 temp = temp->next; 
 } 
 printf("\n"); 
 } 
} 
int main() { 
 struct Graph* graph = createGraph(4); 
 addEdge(graph, 0, 1); 
 addEdge(graph, 0, 2); 
 addEdge(graph, 1, 2); 
 addEdge(graph, 2, 3); 
 printGraph(graph); 
 DFS(graph, 2); 
 return 0; 
} 
OUTPUT: 

BFS: 
// BFS algorithm in C 
#include <stdio.h> 
#include <stdlib.h> 
#define SIZE 40 
struct queue { 
 int items[SIZE]; 
 int front; 
 int rear; 
};
struct queue* createQueue(); 
void enqueue(struct queue* q, int); 
int dequeue(struct queue* q); 
void display(struct queue* q); 
int isEmpty(struct queue* q); 
void printQueue(struct queue* q); 
struct node { 
 int vertex; 
 struct node* next; 
};
struct node* createNode(int); 
struct Graph { 
 int numVertices; 
 struct node** adjLists; 
 int* visited; 
};
// BFS algorithm 
void bfs(struct Graph* graph, int startVertex) { 
 struct queue* q = createQueue(); 
 graph->visited[startVertex] = 1; 
 enqueue(q, startVertex); 
 while (!isEmpty(q)) { 
 printQueue(q); 
 int currentVertex = dequeue(q); 
 printf("Visited %d\n", currentVertex); 
 struct node* temp = graph->adjLists[currentVertex]; 
 while (temp) { 
 int adjVertex = temp->vertex; 
 if (graph->visited[adjVertex] == 0) { 
 graph->visited[adjVertex] = 1; 
 enqueue(q, adjVertex); 
 } 
 temp = temp->next; 
 } 
 } 
} 
// Creating a node 
struct node* createNode(int v) { 
 struct node* newNode = malloc(sizeof(struct node)); 
 newNode->vertex = v; 
 newNode->next = NULL; 
 return newNode; 
} 
// Creating a graph 
struct Graph* createGraph(int vertices) { 
 struct Graph* graph = malloc(sizeof(struct Graph)); 
 graph->numVertices = vertices; 
 graph->adjLists = malloc(vertices * sizeof(struct node*)); 
 graph->visited = malloc(vertices * sizeof(int)); 
 int i; 
 for (i = 0; i < vertices; i++) { 
 graph->adjLists[i] = NULL; 
 graph->visited[i] = 0; 
 } 
 return graph; 
} 
// Add edge 
void addEdge(struct Graph* graph, int src, int dest) { 
 // Add edge from src to dest 
 struct node* newNode = createNode(dest); 
 newNode->next = graph->adjLists[src]; 
 graph->adjLists[src] = newNode; 
 // Add edge from dest to src 
 newNode = createNode(src); 
 newNode->next = graph->adjLists[dest]; 
 graph->adjLists[dest] = newNode; 
} 
// Create a queue 
struct queue* createQueue() {
 struct queue* q = malloc(sizeof(struct queue)); 
 q->front = -1;
 q->rear = -1;
 return q; 
} 
// Check if the queue is empty 
int isEmpty(struct queue* q) { 
 if (q->rear == -1)
 return 1; 
 else 
 return 0; 
} 
// Adding elements into queue 
void enqueue(struct queue* q, int value) { 
 if (q->rear == SIZE - 1)
 printf("\nQueue is Full!!"); 
 else { 
 if (q->front == -1)
 q->front = 0; 
 q->rear++; 
 q->items[q->rear] = value; 
 } 
} 
// Removing elements from queue 
int dequeue(struct queue* q) { 
 int item; 
 if (isEmpty(q)) { 
 printf("Queue is empty"); 
 item = -1;
 } else { 
 item = q->items[q->front]; 
 q->front++; 
 if (q->front > q->rear) { 
 printf("Resetting queue "); 
 q->front = q->rear = -1;
 } 
 } 
 return item; 
} 
// Print the queue 
void printQueue(struct queue* q) { 
 int i = q->front; 
 if (isEmpty(q)) { 
 printf("Queue is empty"); 
 } else { 
 printf("\nQueue contains \n"); 
 for (i = q->front; i < q->rear + 1; i++) { 
 printf("%d ", q->items[i]); 
 } 
 } 
} 
int main() { 
 struct Graph* graph = createGraph(6); 
 addEdge(graph, 0, 1); 
 addEdge(graph, 0, 2); 
 addEdge(graph, 1, 2); 
 addEdge(graph, 1, 4); 
 addEdge(graph, 1, 3); 
 addEdge(graph, 2, 4); 
 addEdge(graph, 3, 4); 
 bfs(graph, 0); 
 return 0; 
} 
OUTPUT: 
